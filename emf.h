/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_EMF__
#define __RUST_EMF__
#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_uint8 {
    /** <No documentation available> */
    uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_uint8_t;

/** <No documentation available> */
typedef struct Patch {
    /** <No documentation available> */
    uint8_t const * address;

    /** <No documentation available> */
    Vec_uint8_t patch_bytes;

    /** <No documentation available> */
    Vec_uint8_t original_bytes;
} Patch_t;


#include <stdbool.h>

/** <No documentation available> */
bool
patch_apply (
    Patch_t * patch);

/** <No documentation available> */
Patch_t *
patch_from_signature (
    Vec_uint8_t signature,
    Vec_uint8_t data);

/** <No documentation available> */
Patch_t *
patch_from_signature_offset (
    Vec_uint8_t signature,
    ssize_t offset,
    Vec_uint8_t data);

/** <No documentation available> */
bool
patch_is_applied (
    Patch_t const * patch);

/** <No documentation available> */
Patch_t *
patch_new (
    uint64_t address,
    Vec_uint8_t data);

/** <No documentation available> */
Vec_uint8_t
patch_read_current (
    Patch_t const * patch);

/** <No documentation available> */
bool
patch_revert (
    Patch_t * patch);

/** <No documentation available> */
Vec_uint8_t
reassemble_instruction_at_offset (
    Vec_uint8_t bytes,
    ssize_t offset);

/** <No documentation available> */
void *
scan_memory (
    Vec_uint8_t signature);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_EMF__ */
